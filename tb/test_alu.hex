# test_alu.s
.globl _start
_start:
  # Test ADDI
  addi x1, x0, 5      # x1 = 5
  addi x2, x0, 10     # x2 = 10
  # Test ADD
  add  x3, x1, x2     # x3 = 5 + 10 = 15
  # Test SUB
  sub  x4, x2, x1     # x4 = 10 - 5 = 5
  # Test SLTI (signed)
  addi x5, x0, -1     # x5 = -1
  slti x6, x1, 10     # x6 = (5 < 10) ? 1 : 0 => 1
  slti x7, x1, 5      # x7 = (5 < 5) ? 1 : 0 => 0
  slti x8, x1, -1     # x8 = (5 < -1) ? 1 : 0 => 0
  slti x9, x5, 0      # x9 = (-1 < 0) ? 1 : 0 => 1
  # Test SLTIU (unsigned)
  sltiu x10, x1, 10   # x10 = (5 < 10) ? 1 : 0 => 1
  sltiu x11, x5, 0    # x11 = (0xFFFFFFFF < 0) ? 1 : 0 => 0 (large unsigned vs 0)
  sltiu x12, x5, -1   # x12 = (0xFFFFFFFF < 0xFFFFFFFF) ? 1 : 0 => 0
  # Test ANDI, ORI, XORI
  andi x13, x1, 0x3   # x13 = 5 & 3 = 1 (0101 & 0011 = 0001)
  ori  x14, x1, 0x8   # x14 = 5 | 8 = 13 (0101 | 1000 = 1101)
  xori x15, x1, 0xF   # x15 = 5 ^ 15 = 10 (0101 ^ 1111 = 1010)
  # Test Shifts (using R-type for amount)
  addi x16, x0, 2     # x16 = 2 (shift amount)
  slli x17, x1, 2     # x17 = 5 << 2 = 20
  sll  x18, x1, x16   # x18 = 5 << x16 = 20
  srli x19, x1, 1     # x19 = 5 >> 1 = 2 (logical)
  srl  x20, x1, x16   # x20 = 5 >> x16 = 1 (logical)
  addi x21, x0, -4    # x21 = -4 (0xFFFFFFFC)
  srai x22, x21, 2    # x22 = -4 >>> 2 = -1 (arithmetic 11..111100 -> 11..111111)
  sra  x23, x21, x16  # x23 = -4 >>> x16 = -1 (arithmetic)
  # Test writing to x0
  addi x0, x0, 100    # Should have no effect, x0 remains 0

  # Infinite loop to halt simulation (or use custom halt)
halt:
  j halt



// addi x1, x0, 5      # x1 = 5
0x00500093
// addi x2, x0, 10     # x2 = 10
0x00A00113
// add  x3, x1, x2     # x3 = 5 + 10
0x002081B3

